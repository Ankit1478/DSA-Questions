public class Mergesort {

    public static void printarr(int arr[]) {
        for (int i = 0; i < arr.length; i++) {
            System.out.print(arr[i] + " ");
        }
        System.out.println();
    }

    public static void mergesort(int arr[], int si, int ei) {
        // BASE CASE
        if (si >= ei) {
            return;
        }
        int mid = si + (ei - si) / 2; // mid = (si+ei)/2
        mergesort(arr, si, mid); // Left print
        mergesort(arr, mid + 1, ei); // Right print
        merge(arr, si, mid, ei);
    }

    public static void merge(int arr[], int si, int mid, int ei) {
        int temp[] = new int[ei - si + 1];
        int i = si; // index for 1st sorted pair
        int j = mid + 1; // index for 2nd sorted pair
        int k = 0; // indx for 0 temporary arr;

        while (i <= mid && j <= ei) { // first sort ma i ki value mid tk jyegai then second sort me j ki value mid se
                                      // end tk jyegi
            if (arr[i] < arr[j]) {
                temp[k] = arr[i];
                i++;
            } else {
                temp[k] = arr[j];
                j++;
            }
            k++;
        }
        // For leftover element of 1st sorted part
        while (i <= mid) {
            temp[k++] = arr[i++];
        }
        // For lefttover element of 2st sorted part
        while (j <= ei) {
            temp[k++] = arr[j++];
        }

        for (k = 0, i = si; k < temp.length; k++, i++) {
            arr[i] = temp[k];
        }

    }

    public static void main(String[] args) {
        int arr[] = { 6, 3, 9, 5, 2, 8 };
        mergesort(arr, 0, arr.length - 1);
        printarr(arr);
    }

}




another method     






public static int[] ninjaAndSortedArrays(int arr1[], int arr2[], int m, int n) {
        int temp[]= new int[m+n];
        int si=m;
        int ei=n;
        int i=0,j=0,k=0;

        while(i<si && j<ei){
            if(arr1[i]<=arr2[j]){
                temp[k++]=arr1[i++];
            }else{
                temp[k++]=arr2[j++];
            }
        }
        while(i<si){
            temp[k++]=arr1[i++];
        }
        while(j<ei){
            temp[k++]=arr2[j++];
        }
          return temp;
    }
