
import java.util.ArrayList;
// while using AP[]boolean for large size of graph
public class AP {
    static class Edge {
        int src;
        int dest;

        Edge(int s, int d) {
            this.src = s;
            this.dest = d;
        }
    }

    public static void dfs(ArrayList<Edge>[] graph, int curr, int par, int dt[], int low[], int time, boolean[] vis,
            boolean[] ap) {
        vis[curr] = true;
        dt[curr] = low[curr] = ++time;
        int children = 0;
        for (int i = 0; i < graph[curr].size(); i++) {
            Edge e = graph[curr].get(i);
            int neighbour = e.dest;
            if (par == neighbour) {
                continue;
            } else if (vis[neighbour]) {
                low[curr] = Math.min(low[curr], dt[neighbour]);
            } else if (!vis[neighbour]) {
                dfs(graph, neighbour, curr, dt, low, time, vis, ap);
                low[curr] = Math.min(low[curr], low[neighbour]);

                if (par != -1 && dt[curr] <= low[neighbour]) {
                    ap[curr] = true;
                    // System.out.println("AP:-" + curr);
                }
                children++;
            }
        }
        if (par == -1 && children > 1) {
            ap[curr] = true;
            // System.out.println("AP:-" + curr);
        }
    }

    public static void getap(ArrayList<Edge>[] graph, int v) {
        int dt[] = new int[v];
        int time = 0;
        int low[] = new int[v];
        boolean[] vis = new boolean[v];
        boolean[] ap = new boolean[v];
        for (int i = 0; i < v; i++) {
            if (!vis[i]) {
                dfs(graph, i, -1, dt, low, time, vis, ap);
            }
        }
        // print ap
        for (int i = 0; i < v; i++) {
            if (ap[i]) {
                System.out.println("AP " + i);
            }
        }

    }

    static void CreateGraph(ArrayList<Edge>[] graph) {
        for (int i = 0; i < graph.length; i++) {
            graph[i] = new ArrayList<>();
        }
        graph[0].add(new Edge(0, 1));
        graph[0].add(new Edge(0, 2));
        graph[0].add(new Edge(0, 3));

        graph[1].add(new Edge(1, 0));
        graph[1].add(new Edge(1, 2));

        graph[2].add(new Edge(2, 0));
        graph[2].add(new Edge(2, 1));

        graph[3].add(new Edge(3, 0));
        graph[3].add(new Edge(3, 4));

        graph[4].add(new Edge(4, 3));

    }

    public static void main(String[] args) {
        int v = 5;
        ArrayList<Edge>[] graph = new ArrayList[v];
        CreateGraph(graph);
        getap(graph, v);
    }
}
